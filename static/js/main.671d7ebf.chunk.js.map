{"version":3,"sources":["commonComponents/taskItemComponent/TaskItem.js","commonComponents/filterComponent/Filter.js","tasksComponent/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["TaskItem","props","className","data","name","content","Filter","param","type","onChange","event","target","value","placeholder","onClick","applyFilterParam","Tasks","useState","setParam","loading","setLoading","tasksData","setTasksData","useEffect","fetch","then","response","json","console","log","map","task","index","catch","error","TaskList","length","key","CustomeRoutes","basename","process","exact","from","to","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0WAIe,SAASA,EAASC,GAC7B,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,cACVD,EAAME,KAAKC,MAEhB,yBAAKF,UAAU,gBACX,2BAAID,EAAME,KAAKE,QAAf,O,MCRD,SAASC,EAAOL,GAC3B,IAAIM,EAAQN,EAAMM,MAOlB,OACI,yBAAKL,UAAU,gBACX,oEACA,2BAAOM,KAAK,SAASC,SATP,SAACC,GACnBH,EAAQG,EAAMC,OAAOC,OAQ6BC,YAAY,oBAC1D,4BAAQC,QAPO,WACnBb,EAAMc,iBAAiBR,KAMnB,W,MCRG,SAASS,IAAS,IAAD,EACFC,mBAAS,GADP,mBACrBV,EADqB,KACdW,EADc,OAEED,oBAAS,GAFX,mBAErBE,EAFqB,KAEZC,EAFY,OAGMH,mBAAS,IAHf,mBAGrBI,EAHqB,KAGVC,EAHU,KAI5BC,qBAAU,WACFH,GAAW,GACXI,MAAM,mDAAD,OAAoDjB,EAApD,wBACFkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GACFyB,QAAQC,IAAI,cAAe1B,GAC3BmB,EAAanB,EAAK2B,KAAI,SAACC,EAAKC,GAC1B,MAAO,CACH5B,KAAM,QAAU4B,EAChB3B,QAAS0B,OAGfX,GAAW,MAGda,OAAM,SAAAC,GACLN,QAAQC,IAAI,cAAeK,GAEzBd,GAAW,QAEtB,CAACb,IAKJ,OACI,6BACI,kBAAC,EAAD,CAAQA,MAASA,EAAOQ,iBANP,SAACH,GACtBU,EAAa,IACbJ,EAASN,MAKJO,EAAU,iBAAmB,GAC9B,kBAACgB,EAAD,CAAUd,UAAWA,KAK1B,SAASc,EAASlC,GACrB,OAAIA,EAAMoB,UAAUe,OAEZ,oCACA,yBAAKlC,UAAU,gBACVD,EAAMoB,UAAUS,KAAI,SAACC,EAAMC,GAExB,OADAD,EAAI,MAAYC,EACT,kBAAC,EAAD,CAAU7B,KAAM4B,EAAMM,IAAKN,EAAKC,aAKzC,GC/ClB,SAASM,IACP,OACE,kBAAC,IAAD,CAAYC,SAAUC,2BACpB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,UAC1B,kBAAC,IAAD,CAAOF,OAAK,EAACG,KAAK,UAChB,kBAAC,EAAD,SAoBKC,MAdf,WACE,OACE,yBAAK3C,UAAU,OACb,4BAAQA,UAAU,cAAlB,uCAGA,kBAACoC,EAAD,MACF,4BAAQpC,UAAU,cAAlB,yBCjBgB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLN,QAAQM,MAAMA,EAAM2B,c","file":"static/js/main.671d7ebf.chunk.js","sourcesContent":["import React from 'react';\n\nimport './TaskItem.css';\n\nexport default function TaskItem(props) {\n    return (\n        <div className=\"task-panel\">\n            <div className=\"task-title\">\n                {props.data.name}\n            </div>\n            <div className=\"task-content\">\n                <p>{props.data.content} </p>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './Filter.css';\n\nexport default function Filter(props) {\n    let param = props.param\n    const getParamValue = (event) => {\n        param = event.target.value;\n    }\n    const getFilterTasks = () => {\n        props.applyFilterParam(param);\n    }\n    return (\n        <div className=\"filter-panel\">\n            <p> Change the param for new tasks list </p>\n            <input type=\"number\" onChange={getParamValue} placeholder=\"Enter the param\"></input>\n            <button onClick={getFilterTasks}>Search</button>\n        </div>\n    )\n}","import React,{ useState, useEffect } from 'react';\n\nimport TaskItem from '../commonComponents/taskItemComponent/TaskItem'\nimport Filter from '../commonComponents/filterComponent/Filter'\n\nimport './Tasks.css';\n\nexport default function Tasks() {\n    const [param, setParam] = useState(5);\n    const [loading, setLoading] = useState(false);\n    const [tasksData, setTasksData] = useState([]);\n    useEffect(()=> {\n            setLoading(true)\n            fetch(`https://baconipsum.com/api/?type=all-meat&paras=${param}&start-with-lorem=1`)\n              .then(response => response.json())\n              .then(data => {\n                  console.log('inside data', data)\n                  setTasksData(data.map((task,index) => {\n                    return {\n                        name: \"Task \" + index,\n                        content: task\n                    }\n                }));\n                  setLoading(false)\n              })\n              // Catch any errors we hit and update the app\n              .catch(error => {\n                console.log('inside data', error)\n\n                  setLoading(false)\n              });\n    }, [param]);\n    const applyFilterParam = (value) => {\n        setTasksData([]);\n        setParam(value);\n    }\n    return (\n        <div>\n            <Filter param = {param} applyFilterParam={applyFilterParam}></Filter>\n            {loading ? 'Loading dataaa' : ''}\n            <TaskList tasksData={tasksData}></TaskList>\n        </div>\n\n    )\n}\nexport function TaskList(props) {\n    if (props.tasksData.length) {\n        return (\n            <>\n            <div className=\"tasks-layout\">\n                {props.tasksData.map((task, index) => {\n                    task['index'] = index;\n                    return <TaskItem data={task} key={task.index}></TaskItem>\n                })}\n            </div>\n            </>\n        )\n    } else return ''\n}","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport Tasks from './tasksComponent/Tasks';\n\nfunction CustomeRoutes() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n      <Redirect exact from=\"/\" to=\"tasks\" />\n        <Route exact path=\"/tasks\">\n          <Tasks />\n        </Route>\n      </Switch>\n  </HashRouter>\n  )\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Welcome to the CDK Global Task List\n      </header>\n      <CustomeRoutes />\n    <footer className=\"App-footer\">\n      Thanks for visiting\n    </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}